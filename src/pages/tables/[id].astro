---
import axios from "axios";
import Layout from "../../layouts/Layout.astro";
import Maincontent from "../../layouts/Maincontent.astro";
import { authenticate } from "../../utils/auth";
// import '../../../public/assets/css/customTheme.css';

const apiUrl = import.meta.env.PUBLIC_API_KEY;
let userId: number, displayName: string, pictureUrl: string, role: string;

const req = Astro.request;

const authResult = await authenticate(req);
if (authResult.redirect) {
  // ถ้าต้องการเปลี่ยนเส้นทาง ให้เปลี่ยนเส้นทางไปที่หน้าล็อกอิน
  return Astro.redirect(authResult.redirect);
} else {
  // ถ้า token ถูกต้อง ให้ดึงข้อมูลที่จำเป็น
  userId = authResult.id;
  role = authResult.role;

  // ตรวจสอบว่า role เป็น hr หรือ super-admin หรือไม่
  if (role !== "hr" && role !== "super-admin") {
    return Astro.redirect("/login"); // เปลี่ยนเส้นทางไปที่หน้าล็อกอินหรือหน้าอื่นที่เหมาะสม
  }
}

const { id } = Astro.params;

const fetchData = async () => {
  // ดึง JWT token จากคุกกี้ในฝั่งเซิร์ฟเวอร์
  const getToken = Astro.cookies.get("auth_token");
  const token = getToken.value;
  if (!token) throw new Error("JWT token not found in cookies");

  try {
    const response = await axios.get(`${apiUrl}/tables/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    return response.data;
  } catch (error) {
    console.error("Failed to fetch data:");
    return null;
  }
};

let userData = await fetchData();
console.log("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa userData:", userData);


function formatDate(dateString) {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  return `${day}-${month}-${year}`;
}

function calculateDaysRemaining(expiresAt: string) {
  const currentDate = new Date();
  const expirationDate = new Date(expiresAt);

  if (isNaN(expirationDate.getTime())) {
    console.error("Invalid expiration date:", expiresAt);
    return NaN;
  }

  const timeDifference = expirationDate.getTime() - currentDate.getTime();
  return Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
}

async function checkImage(url) {
  try {
    const response = await fetch(url);
    return response.ok;
  } catch (error) {
    return false;
  }
}

const defaultImageUrl = "/images/wtd.jpg";
const profileImageUrl = (await checkImage(userData.line_usrphoto))
  ? userData.line_usrphoto
  : defaultImageUrl;

  interface OptionsType {
  branches: string[];
  departments: string[];
  groups: string[];
}

let Options: OptionsType = {
  branches: [],
  departments: [],
  groups: [],
};

const fetchOptions = async () => {
  try {
    const response = await axios.post("http://localhost:5000/get-options");
    Options = response.data;    
  } catch (error) {
    console.error("Failed to fetch branch options:", error);
  }
};

await fetchOptions();
---

<Layout title="User Profile" id={userId} />

{
  userData ? (
    <Maincontent title="จัดการสมาชิก">
      <div class="profile-card">
        <div class="div-back-btn">
          <span class="back-btn">&times;</span>
        </div>

        <div class="profile-image">
          <img
            src={profileImageUrl}
            alt="Profile Picture"
            class="profile-picture rounded-circle"
          />
        </div>

        <div class="profile-info">
          <div class="profile-name">
            {userData.first_name} {userData.last_name}
            <div class="profile-nickname">{`(${userData.nickname})`}</div>
          </div>

          <div class="profile-badges">
            <span class="badge badge-branch">{userData.branch_name}</span>
            <span class="badge badge-department">{userData.department_name}</span>
            <span class="badge badge-role">{userData.status}</span>
            <span class="badge badge-status">{userData.verify}</span>
          </div>

          <div class="profile-details">
            <div class="detail-item">
              <i class="mdi mdi-tablet-android" />
              <span>{userData.tel}</span>
            </div>
            <div class="detail-item">
              <i class="mdi mdi-email" />
              <span>{userData.email}</span>
            </div>
            <div class="detail-item">
              <i class="mdi mdi-calendar-month" />
              <span>{formatDate(userData.datetime)}</span>
            </div>
            <div class="btn outline-secondary waves-effect waves-light ">
              <div class="display-title-group">
                <i class="mdi mdi-account-group gap" />
                <span>กลุ่มที่สังกัด:</span>
              </div>

              <ul class="group-list">
                {userData.groups.length > 0 ? (
                  userData.groups.map((group) => <li>{group}</li>)
                ) : (
                  <li>ไม่มีกลุ่ม</li>
                )}
              </ul>
            </div>
            <div class="btn outline-secondary waves-effect waves-light">
              <div class="display-title-group">
                <i class="mdi mdi-account-star gap" />
                <span>กลุ่มที่เป็นLeader:</span>
              </div>

              <ul class="group-list">
                {userData.leaderGroups && userData.leaderGroups.length > 0 ? (
                  userData.leaderGroups.map((group) => <li>{group}</li>)
                ) : (
                  <li>ไม่มีกลุ่มที่เป็นLeader</li>
                )}
              </ul>
            </div>
            <div class="button-container">
              <a href="#" class="btn btn-primary btn-sm" id="edit-button">
                แก้ไขข้อมูล
              </a>
              <a href="#" class="btn btn-primary btn-sm" id="token-button">
                จัดการToken
              </a>
              <a href="#" id="manage-group-link" class="btn btn-primary btn-sm">
                จัดการกลุ่ม
              </a>
              <a
                href="#"
                id="manage-leader-group-link"
                class="btn btn-primary btn-sm"
              >
                จัดการLeader
              </a>
            </div>
          </div>
        </div>
      </div>

      {/* ====================================================================== */}

      <div id="token-modal" class="modal">
        <div class="token-modal-content">
          <div class="title-card">
            <div>
              <h4>
                จัดการ Token ของ {userData?.first_name} {userData?.last_name}{" "}
              </h4>
            </div>
            <div class="div-back-btn">
              <button class="token-back-btn back-btn">&times;</button>
            </div>
          </div>

          {userData.tokens && userData.tokens.length > 0 ? (
            userData.tokens.map((token) => (
              <div class="token-item">
                <div style={{ display: "flex", alignItems: "center" }}>
                  <strong>Token ID:</strong> {token.id}
                  <strong style={{ marginLeft: "10px" }}>
                    สร้างเมื่อ:
                  </strong>{" "}
                  {new Date(token.createdAt).toLocaleString()}
                  <strong style={{ marginLeft: "10px" }}>
                    หมดอายุในอีก {calculateDaysRemaining(token.expiresAt)} วัน
                  </strong>
                </div>
                <button
                  class="btn btn-primary btn-sm"
                  id="delete-token-button"
                  data-id={id}
                  data-token-id={token.id}
                >
                  ลบ Token
                </button>
              </div>
            ))
          ) : (
            <p>ไม่พบข้อมูล Token</p>
          )}
        </div>
      </div>

      {/* ====================================================================== */}

      <div id="edit-modal" class="modal">
        <div class="profile-card modal-content">
          <div class="profile-image">
            <img
              src={profileImageUrl}
              alt="Profile Picture"
              class="profile-picture rounded-circle"
            />
          </div>

          <div class="profile-info">
            <form>
              <div class="edit-profile-name ">
                <div class="form-group">
                  <label for="fname">ชื่อ</label>
                  <input
                    class="form-control "
                    type="text"
                    id="fname"
                    name="first_name"
                    value={userData.first_name}
                    placeholder="ชื่อ"
                  />
                </div>

                <div class="form-group">
                  <label for="lname">นามสกุล</label>
                  <input
                    class="form-control "
                    type="text"
                    id="lname"
                    name="last_name"
                    placeholder="นามสกุล"
                    value={userData.last_name}
                  />
                </div>

                <div class="form-group">
                  <label for="nickname">ชื่อเล่น</label>
                  <input
                    class="form-control "
                    type="text"
                    id="nickname"
                    name="nickname"
                    placeholder="ชื่อเล่น"
                    value={userData.nickname}
                  />
                </div>
              </div>

              <div class="edit-select">
                <div class="edit-profile-name">
                  <div class="form-group">
                    <label for="branch">สาขา</label>
                    <select id="branch" name="branch" class="custom-select ">
                      {Options.branches.map((branch) => (
                        <option
                          value={branch}
                          selected={userData.branch_name === branch}
                        >
                          {branch}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div class="form-group">
                    <label for="department">แผนก</label>
                    <select
                      id="department"
                      name="department"
                      class="custom-select "
                    >
                       {Options.departments.map((department) => (
                        <option value={department} selected={userData.branch_name === department} >
                          {department}
                        </option>
                      ))}
                    </select>
                  </div>
                  {role === "super-admin" && (
                    <div class="form-group">
                      <label for="status">สิทธิ์</label>
                      <select id="status" name="status" class="custom-select">
                        <option
                          value="super-admin"
                          selected={userData.status === "super-admin"}
                        >
                          ผู้ดูแลระบบ
                        </option>
                        <option
                          value="user"
                          selected={userData.status === "user"}
                        >
                          ที่ปรึกษาฝ่ายขาย
                        </option>
                        <option
                          value="admin"
                          selected={userData.status === "admin"}
                        >
                          ผู้ตรวจเอกสาร(TBR)
                        </option>
                        <option
                          value="crl"
                          selected={userData.status === "crl"}
                        >
                          ลูกค้าสัมพันธ์
                        </option>
                        <option
                          value="d2s"
                          selected={userData.status === "d2s"}
                        >
                          ฝ่ายการตลาด(D2S)
                        </option>
                        <option
                          value="leader"
                          selected={userData.status === "leader"}
                        >
                          ผู้จัดการทีมขาย
                        </option>
                        <option value="hr" selected={userData.status === "hr"}>
                          ฝ่ายบุคคล
                        </option>
                      </select>
                    </div>
                  )}

                  <div class="form-group">
                    <label for="verify">สถานะ</label>
                    <select id="verify" name="verify" class="custom-select ">
                      <option value="ใช้งาน" selected={userData.verify === "1"}>
                        ใช้งาน
                      </option>
                      <option value="ออก" selected={userData.verify === "0"}>
                        ยังไม่อนุมัติ
                      </option>
                      <option
                        value="ยังไม่อนุมัติ"
                        selected={userData.verify === "10"}
                      >
                        ออก
                      </option>
                    </select>
                  </div>
                </div>
              </div>

              <div class="form-group">
                <label for="tel">เบอร์โทรศัพท์</label>
                <input
                  class="form-control "
                  type="text"
                  id="tel"
                  name="tel"
                  placeholder="หมายเลขโทรศัพท์"
                  value={userData.tel}
                />
              </div>

              <div class="form-group">
                <label for="email">ที่อยู่Email</label>
                <input
                  class="form-control"
                  type="text"
                  id="email"
                  name="email"
                  placeholder="ที่อยู่ Email"
                  value={userData.email}
                />
              </div>

              <div class="btn-submit">
                {role === "super-admin" && (
                  <input type="submit" value="ยืนยัน" class="btn btn-primary" />
                )}
                {role === "hr" && (
                  <input
                    type="submit"
                    value="Submit"
                    class="btn btn-secondary"
                  />
                )}
              </div>
            </form>
          </div>
        </div>
      </div>
    </Maincontent>
  ) : (
    <Maincontent title="User Profile">
      <p>ไม่พบข้อมูลผู้ใช้</p>
    </Maincontent>
  )
}

<script>
  import axios from "axios";
  import deleteTokenApi from "../../components/delete-token";
  import Swal from "sweetalert2";

  document.addEventListener("DOMContentLoaded", () => {
    const editButton = document.getElementById("edit-button");
    const tokenButton = document.getElementById("token-button");
    const manageGroupLink = document.getElementById("manage-group-link");
    const manageGroupLeaderLink = document.getElementById(
      "manage-leader-group-link"
    );
    const tokenModal = document.getElementById("token-modal");
    const modal = document.getElementById("edit-modal");
    const closeButton = document.querySelector(".back-btn");
    const tokenBackBtn = document.querySelector(".token-back-btn");
    const frontEnd = import.meta.env.PUBLIC_FRONTEND_UrL;

    // ฟังก์ชันสำหรับดึงค่า cookie
    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(";").shift();
    }

    // เปิด modal สำหรับปุ่ม แก้ไขข้อมูล
    if (editButton) {
      editButton.addEventListener("click", (event) => {
        event.preventDefault();
        if (modal) {
          modal.style.display = "block";
        }
      });
    }
    // ส่งข้อมูลที่แก้ไขใน แก้ไขข้อมูล
    const form = document.querySelector("form");
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      console.log("data:", data);
      

      const currentUrl = window.location.href;
      const base64Id = currentUrl.split("/").pop();
      const apiUrl = import.meta.env.PUBLIC_API_KEY;

      try {
        const token = getCookie("auth_token");
        if (!token) throw new Error("No JWT token found in cookies");

        // ตรวจสอบว่าปุ่มไหนถูกคลิก
        const targetApi = event.submitter.classList.contains("btn-primary")
          ? `${apiUrl}/superadmin-update/${base64Id}`
          : `${apiUrl}/hr-update/${base64Id}`;

        const response = await axios.put(targetApi, data, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (response.status === 200) {
          modal.style.display = "none"; // ปิด modal หลังจากอัปเดตสำเร็จ
          Swal.fire({
            position: "center",
            icon: "success",
            title: "การแก้ไขข้อมูลสำเร็จ",
            showConfirmButton: false,
            timer: 800,
          }).then(() => {
            window.location.reload(); // รีโหลดหน้าเว็บ
          });
        } else {
          Swal.fire("Update failed");
        }
      } catch (error) {
        console.error("Error updating member:", error); // แสดง error ใน console
        Swal.fire("An error occurred while updating the member"); // แจ้งเตือนว่าเกิดข้อผิดพลาด
      }
    });

    // เปิด modal สำหรับปุ่ม จัดการToken
    if (tokenButton) {
      tokenButton.addEventListener("click", (event) => {
        event.preventDefault();
        if (tokenModal) {
          tokenModal.style.display = "block";
        }
      });
    }
    // ลบ Token
    document.querySelectorAll("#delete-token-button").forEach((button) => {
      button.addEventListener("click", async (event) => {
        event.preventDefault();

        const tokenId = button.getAttribute("data-token-id");
        const id = button.getAttribute("data-id");

        // ส่งค่า id และ tokenId ไปยัง API
        await deleteTokenApi(id, tokenId);
      });
    });

    // ไปหน้า จัดการกลุ่ม
    if (manageGroupLink) {
      manageGroupLink.addEventListener("click", (event) => {
        event.preventDefault();
        const currentUrl = window.location.href;
        const base64Id = currentUrl.split("/").pop();
        window.location.href = `/tables/manage-group/${base64Id}`;
      });
    }

    // ไปหน้า จัดการกลุ่ม Leader
    if (manageGroupLeaderLink) {
      manageGroupLeaderLink.addEventListener("click", (event) => {
        event.preventDefault();
        const currentUrl = window.location.href;
        const base64Id = currentUrl.split("/").pop();
        window.location.href = `/tables/manage-groupleader/${base64Id}`;
      });
    }

    // ปิด modal เมื่อคลิกปุ่มปิด
    if (closeButton) {
      closeButton.addEventListener("click", () => {
        window.location.href = `${frontEnd}/tables`;
      });
    }

    if (tokenBackBtn) {
      tokenBackBtn.addEventListener("click", () => {
        tokenModal.style.display = "none";
      });
    }

    // ปิด modal เมื่อคลิกนอก modal
    window.addEventListener("click", (event) => {
      if (modal && event.target == modal) {
        modal.style.display = "none";
      }
      if (tokenModal && event.target == tokenModal) {
        tokenModal.style.display = "none";
      }
    });
  });
</script>
